generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id            String          @id @default(uuid())
  title         String
  slug          String          @unique
  coverUrl      String?
  harmonization String?
  validate      String?
  isDestack     Boolean         @default(false)
  categoryId    String?
  createdAt     DateTime        @default(now())
  category      Category?       @relation(fields: [categoryId], references: [id])
  productDetail ProductDetail[]
  ingredients   Ingredient[]    @relation("IngredientToProduct")

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model ProductDetail {
  id              String   @id @default(uuid())
  weight          Int
  netWeight       Int?
  discount        Int?     @default(0)
  price           Int
  qunatityInStock Int
  productId       String
  createdAt       DateTime @default(now())
  product         Product  @relation(fields: [productId], references: [id], onDelete: NoAction)

  @@index([productId], map: "ProductDetail_productId_fkey")
}

model Ingredient {
  id        String    @id @default(uuid())
  name      String
  cor       String?
  imageUrl  String?
  createdAt DateTime  @default(now())
  products  Product[] @relation("IngredientToProduct")
}

model Category {
  id          String    @id @default(uuid())
  title       String
  description String?
  coverUrl    String?
  createdAt   DateTime  @default(now())
  products    Product[]
}

model Testimonial {
  id          String   @id @default(uuid())
  name        String
  testimonial String
  email       String?
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String?
}

model Order {
  id               String            @id @default(uuid())
  orderNumber      String
  statusPayment    StatusPayment     @default(PENDING)
  statusOrder      StatusOrder       @default(PENDING)
  fullName         String
  email            String
  phone            String
  postalCode       String
  address          String
  city             String
  country          String
  complement       String?
  observations     String?
  totalAmount      Decimal
  delivered        Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  selectedProducts SelectedProduct[]
  User             User?             @relation(fields: [userId], references: [id])
  userId           String?
}

model SelectedProduct {
  id        String  @id @default(uuid())
  title     String
  coverUrl  String  @default("/assets/placeholder-image.svg")
  price     Int
  weight    Int
  netWeight Int
  quantity  Int
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
}

enum StatusPayment {
  PENDING
  PAID
  CANCELED
}

enum StatusOrder {
  PENDING
  PREPERING
  CANCELED
  DELIVERED
}

// AUTH
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  role           Role      @default(USER)
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  accounts       Account[]
  sessions       Session[]
  orders         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  USER
}
